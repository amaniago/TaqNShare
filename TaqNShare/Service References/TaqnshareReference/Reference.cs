//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34011
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TaqNShare.TaqnshareReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaqnshareReference.ServiceTaqnshare")]
    public interface ServiceTaqnshare {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ServiceTaqnshare/EnvoyerImage", ReplyAction="http://tempuri.org/ServiceTaqnshare/EnvoyerImageResponse")]
        System.IAsyncResult BeginEnvoyerImage(byte[] imageByte, string nomImage, System.AsyncCallback callback, object asyncState);
        
        string EndEnvoyerImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ServiceTaqnshare/RecupererImage", ReplyAction="http://tempuri.org/ServiceTaqnshare/RecupererImageResponse")]
        System.IAsyncResult BeginRecupererImage(string nomImage, System.AsyncCallback callback, object asyncState);
        
        byte[] EndRecupererImage(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceTaqnshareChannel : TaqNShare.TaqnshareReference.ServiceTaqnshare, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EnvoyerImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EnvoyerImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecupererImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecupererImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceTaqnshareClient : System.ServiceModel.ClientBase<TaqNShare.TaqnshareReference.ServiceTaqnshare>, TaqNShare.TaqnshareReference.ServiceTaqnshare {
        
        private BeginOperationDelegate onBeginEnvoyerImageDelegate;
        
        private EndOperationDelegate onEndEnvoyerImageDelegate;
        
        private System.Threading.SendOrPostCallback onEnvoyerImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecupererImageDelegate;
        
        private EndOperationDelegate onEndRecupererImageDelegate;
        
        private System.Threading.SendOrPostCallback onRecupererImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceTaqnshareClient() {
        }
        
        public ServiceTaqnshareClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceTaqnshareClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTaqnshareClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceTaqnshareClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<EnvoyerImageCompletedEventArgs> EnvoyerImageCompleted;
        
        public event System.EventHandler<RecupererImageCompletedEventArgs> RecupererImageCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TaqNShare.TaqnshareReference.ServiceTaqnshare.BeginEnvoyerImage(byte[] imageByte, string nomImage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEnvoyerImage(imageByte, nomImage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string TaqNShare.TaqnshareReference.ServiceTaqnshare.EndEnvoyerImage(System.IAsyncResult result) {
            return base.Channel.EndEnvoyerImage(result);
        }
        
        private System.IAsyncResult OnBeginEnvoyerImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            byte[] imageByte = ((byte[])(inValues[0]));
            string nomImage = ((string)(inValues[1]));
            return ((TaqNShare.TaqnshareReference.ServiceTaqnshare)(this)).BeginEnvoyerImage(imageByte, nomImage, callback, asyncState);
        }
        
        private object[] OnEndEnvoyerImage(System.IAsyncResult result) {
            string retVal = ((TaqNShare.TaqnshareReference.ServiceTaqnshare)(this)).EndEnvoyerImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEnvoyerImageCompleted(object state) {
            if ((this.EnvoyerImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EnvoyerImageCompleted(this, new EnvoyerImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EnvoyerImageAsync(byte[] imageByte, string nomImage) {
            this.EnvoyerImageAsync(imageByte, nomImage, null);
        }
        
        public void EnvoyerImageAsync(byte[] imageByte, string nomImage, object userState) {
            if ((this.onBeginEnvoyerImageDelegate == null)) {
                this.onBeginEnvoyerImageDelegate = new BeginOperationDelegate(this.OnBeginEnvoyerImage);
            }
            if ((this.onEndEnvoyerImageDelegate == null)) {
                this.onEndEnvoyerImageDelegate = new EndOperationDelegate(this.OnEndEnvoyerImage);
            }
            if ((this.onEnvoyerImageCompletedDelegate == null)) {
                this.onEnvoyerImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEnvoyerImageCompleted);
            }
            base.InvokeAsync(this.onBeginEnvoyerImageDelegate, new object[] {
                        imageByte,
                        nomImage}, this.onEndEnvoyerImageDelegate, this.onEnvoyerImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TaqNShare.TaqnshareReference.ServiceTaqnshare.BeginRecupererImage(string nomImage, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecupererImage(nomImage, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] TaqNShare.TaqnshareReference.ServiceTaqnshare.EndRecupererImage(System.IAsyncResult result) {
            return base.Channel.EndRecupererImage(result);
        }
        
        private System.IAsyncResult OnBeginRecupererImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string nomImage = ((string)(inValues[0]));
            return ((TaqNShare.TaqnshareReference.ServiceTaqnshare)(this)).BeginRecupererImage(nomImage, callback, asyncState);
        }
        
        private object[] OnEndRecupererImage(System.IAsyncResult result) {
            byte[] retVal = ((TaqNShare.TaqnshareReference.ServiceTaqnshare)(this)).EndRecupererImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRecupererImageCompleted(object state) {
            if ((this.RecupererImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecupererImageCompleted(this, new RecupererImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecupererImageAsync(string nomImage) {
            this.RecupererImageAsync(nomImage, null);
        }
        
        public void RecupererImageAsync(string nomImage, object userState) {
            if ((this.onBeginRecupererImageDelegate == null)) {
                this.onBeginRecupererImageDelegate = new BeginOperationDelegate(this.OnBeginRecupererImage);
            }
            if ((this.onEndRecupererImageDelegate == null)) {
                this.onEndRecupererImageDelegate = new EndOperationDelegate(this.OnEndRecupererImage);
            }
            if ((this.onRecupererImageCompletedDelegate == null)) {
                this.onRecupererImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecupererImageCompleted);
            }
            base.InvokeAsync(this.onBeginRecupererImageDelegate, new object[] {
                        nomImage}, this.onEndRecupererImageDelegate, this.onRecupererImageCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TaqNShare.TaqnshareReference.ServiceTaqnshare CreateChannel() {
            return new ServiceTaqnshareClientChannel(this);
        }
        
        private class ServiceTaqnshareClientChannel : ChannelBase<TaqNShare.TaqnshareReference.ServiceTaqnshare>, TaqNShare.TaqnshareReference.ServiceTaqnshare {
            
            public ServiceTaqnshareClientChannel(System.ServiceModel.ClientBase<TaqNShare.TaqnshareReference.ServiceTaqnshare> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginEnvoyerImage(byte[] imageByte, string nomImage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = imageByte;
                _args[1] = nomImage;
                System.IAsyncResult _result = base.BeginInvoke("EnvoyerImage", _args, callback, asyncState);
                return _result;
            }
            
            public string EndEnvoyerImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("EnvoyerImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRecupererImage(string nomImage, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = nomImage;
                System.IAsyncResult _result = base.BeginInvoke("RecupererImage", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndRecupererImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("RecupererImage", _args, result)));
                return _result;
            }
        }
    }
}
